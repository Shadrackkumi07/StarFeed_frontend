{"ast":null,"code":"var _jsxFileName = \"D:\\\\CoSchedule\\\\coschedule_frontend\\\\src\\\\components\\\\Comments.jsx\",\n  _s = $RefreshSig$();\n// src/components/Comments.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../auth/AuthProvider';\nimport api from '../api';\nimport './Comments.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Comments({\n  itemId\n}) {\n  _s();\n  const {\n    currentUser\n  } = useAuth();\n\n  // flat list & tree\n  const [flatComments, setFlatComments] = useState([]);\n  const [commentsTree, setCommentsTree] = useState([]);\n\n  // UI state\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // new top-level comment\n  const [newText, setNewText] = useState('');\n\n  // replies: which comment weâ€™re replying to, and text per comment\n  const [replyTo, setReplyTo] = useState(null);\n  const [replyTexts, setReplyTexts] = useState({});\n\n  // editing existing comment\n  const [editingId, setEditingId] = useState(null);\n  const [editText, setEditText] = useState('');\n\n  // 1. Build nested tree from flat list\n  const buildTree = list => {\n    const map = {};\n    list.forEach(c => {\n      map[c._id] = {\n        ...c,\n        replies: []\n      };\n    });\n    const roots = [];\n    list.forEach(c => {\n      if (c.parentId && map[c.parentId]) {\n        map[c.parentId].replies.push(map[c._id]);\n      } else {\n        roots.push(map[c._id]);\n      }\n    });\n    return roots;\n  };\n\n  // 2. Fetch flat comments & build tree\n  const fetchComments = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const resp = await api.get('/comments', {\n        params: {\n          itemId\n        }\n      });\n      setFlatComments(resp.data);\n      setCommentsTree(buildTree(resp.data));\n    } catch {\n      setError('Could not load comments');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchComments();\n  }, [itemId]);\n\n  // 3. Post (new or reply)\n  const postComment = async (text, parentId = null) => {\n    if (!text.trim()) return;\n    try {\n      const token = await currentUser.getIdToken();\n      await api.post('/comments', {\n        itemId,\n        text,\n        parentId\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      // clear appropriate field\n      if (parentId) {\n        setReplyTexts(prev => ({\n          ...prev,\n          [parentId]: ''\n        }));\n        // Only close the reply box if the reply was successful and the text was not empty\n        setReplyTo(null);\n      } else {\n        setNewText('');\n      }\n      // Only fetch comments after clearing state, to avoid UI flicker\n      setTimeout(fetchComments, 0);\n    } catch {\n      setError('Could not post comment');\n    }\n  };\n\n  // 4. Update\n  const updateComment = async () => {\n    if (!editText.trim()) return;\n    try {\n      const token = await currentUser.getIdToken();\n      await api.put(`/comments/${editingId}`, {\n        text: editText\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setEditingId(null);\n      setEditText('');\n      fetchComments();\n    } catch {\n      setError('Could not update comment');\n    }\n  };\n\n  // 5. Delete\n  const deleteComment = async id => {\n    try {\n      const token = await currentUser.getIdToken();\n      await api.delete(`/comments/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      fetchComments();\n    } catch {\n      setError('Could not delete comment');\n    }\n  };\n\n  // 6. Recursive node\n  const CommentNode = ({\n    node,\n    depth = 0\n  }) => /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"comment-card\",\n    style: {\n      marginLeft: depth * 16\n    },\n    children: [editingId === node._id ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"comment-input\",\n        rows: \"2\",\n        value: editText,\n        onChange: e => setEditText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: updateComment,\n          className: \"comment-save-btn\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setEditingId(null),\n          className: \"comment-cancel-btn\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"comment-author\",\n        children: currentUser.email.split('@')[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"comment-text\",\n        children: node.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-meta\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"comment-time\",\n          children: new Date(node.createdAt).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setReplyTo(node._id);\n            setReplyTexts(prev => ({\n              ...prev,\n              [node._id]: ''\n            }));\n          },\n          className: \"comment-reply-btn\",\n          children: \"Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), node.userId === currentUser.uid && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setEditingId(node._id);\n              setEditText(node.text);\n            },\n            className: \"comment-edit-btn\",\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteComment(node._id),\n            className: \"comment-delete-btn\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this), replyTo === node._id && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"reply-form\",\n      onSubmit: e => {\n        e.preventDefault();\n        // Only post if not empty\n        if ((replyTexts[node._id] || '').trim()) {\n          postComment(replyTexts[node._id], node._id);\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"comment-input\",\n        rows: \"2\",\n        placeholder: \"Write a reply\\u2026\",\n        value: replyTexts[node._id] || '',\n        onChange: e => setReplyTexts(prev => ({\n          ...prev,\n          [node._id]: e.target.value\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"comment-save-btn\",\n          disabled: !(replyTexts[node._id] || '').trim(),\n          children: \"Post Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => setReplyTo(null),\n          className: \"comment-cancel-btn\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), node.replies.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: node.replies.map(child => /*#__PURE__*/_jsxDEV(CommentNode, {\n        node: child,\n        depth: depth + 1\n      }, child._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n\n  // 7. Render\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"comments-loading\",\n    children: \"Loading comments\\u2026\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"comments-error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"comments-title\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"comment-form\",\n      onSubmit: e => {\n        e.preventDefault();\n        postComment(newText, null);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"comment-input\",\n        rows: \"3\",\n        placeholder: \"Add a comment\\u2026\",\n        value: newText,\n        onChange: e => setNewText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !newText.trim(),\n        className: \"comment-submit-btn\",\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"comment-list\",\n      children: commentsTree.map(node => /*#__PURE__*/_jsxDEV(CommentNode, {\n        node: node\n      }, node._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n_s(Comments, \"jizLEKmTOPm0mCeBCVyW+mRH8bw=\", false, function () {\n  return [useAuth];\n});\n_c = Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","api","jsxDEV","_jsxDEV","Fragment","_Fragment","Comments","itemId","_s","currentUser","flatComments","setFlatComments","commentsTree","setCommentsTree","loading","setLoading","error","setError","newText","setNewText","replyTo","setReplyTo","replyTexts","setReplyTexts","editingId","setEditingId","editText","setEditText","buildTree","list","map","forEach","c","_id","replies","roots","parentId","push","fetchComments","resp","get","params","data","postComment","text","trim","token","getIdToken","post","headers","Authorization","prev","setTimeout","updateComment","put","deleteComment","id","delete","CommentNode","node","depth","className","style","marginLeft","children","rows","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","email","split","Date","createdAt","toLocaleString","userId","uid","onSubmit","preventDefault","placeholder","type","disabled","length","child","_c","$RefreshReg$"],"sources":["D:/CoSchedule/coschedule_frontend/src/components/Comments.jsx"],"sourcesContent":["// src/components/Comments.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useAuth }            from '../auth/AuthProvider';\r\nimport api                    from '../api';\r\nimport './Comments.css';\r\n\r\nexport default function Comments({ itemId }) {\r\n  const { currentUser } = useAuth();\r\n\r\n  // flat list & tree\r\n  const [flatComments, setFlatComments] = useState([]);\r\n  const [commentsTree, setCommentsTree] = useState([]);\r\n\r\n  // UI state\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError]     = useState('');\r\n\r\n  // new top-level comment\r\n  const [newText, setNewText] = useState('');\r\n\r\n  // replies: which comment weâ€™re replying to, and text per comment\r\n  const [replyTo, setReplyTo]               = useState(null);\r\n  const [replyTexts, setReplyTexts]         = useState({});\r\n\r\n  // editing existing comment\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [editText, setEditText]   = useState('');\r\n\r\n  // 1. Build nested tree from flat list\r\n  const buildTree = list => {\r\n    const map = {};\r\n    list.forEach(c => { map[c._id] = { ...c, replies: [] }; });\r\n    const roots = [];\r\n    list.forEach(c => {\r\n      if (c.parentId && map[c.parentId]) {\r\n        map[c.parentId].replies.push(map[c._id]);\r\n      } else {\r\n        roots.push(map[c._id]);\r\n      }\r\n    });\r\n    return roots;\r\n  };\r\n\r\n  // 2. Fetch flat comments & build tree\r\n  const fetchComments = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      const resp = await api.get('/comments', { params: { itemId } });\r\n      setFlatComments(resp.data);\r\n      setCommentsTree(buildTree(resp.data));\r\n    } catch {\r\n      setError('Could not load comments');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [itemId]);\r\n\r\n  // 3. Post (new or reply)\r\n  const postComment = async (text, parentId = null) => {\r\n    if (!text.trim()) return;\r\n    try {\r\n      const token = await currentUser.getIdToken();\r\n      await api.post(\r\n        '/comments',\r\n        { itemId, text, parentId },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      // clear appropriate field\r\n      if (parentId) {\r\n        setReplyTexts(prev => ({ ...prev, [parentId]: '' }));\r\n        // Only close the reply box if the reply was successful and the text was not empty\r\n        setReplyTo(null);\r\n      } else {\r\n        setNewText('');\r\n      }\r\n      // Only fetch comments after clearing state, to avoid UI flicker\r\n      setTimeout(fetchComments, 0);\r\n    } catch {\r\n      setError('Could not post comment');\r\n    }\r\n  };\r\n\r\n  // 4. Update\r\n  const updateComment = async () => {\r\n    if (!editText.trim()) return;\r\n    try {\r\n      const token = await currentUser.getIdToken();\r\n      await api.put(\r\n        `/comments/${editingId}`,\r\n        { text: editText },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      setEditingId(null);\r\n      setEditText('');\r\n      fetchComments();\r\n    } catch {\r\n      setError('Could not update comment');\r\n    }\r\n  };\r\n\r\n  // 5. Delete\r\n  const deleteComment = async id => {\r\n    try {\r\n      const token = await currentUser.getIdToken();\r\n      await api.delete(`/comments/${id}`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      fetchComments();\r\n    } catch {\r\n      setError('Could not delete comment');\r\n    }\r\n  };\r\n\r\n  // 6. Recursive node\r\n  const CommentNode = ({ node, depth = 0 }) => (\r\n    <li className=\"comment-card\" style={{ marginLeft: depth * 16 }}>\r\n      {/* Edit mode */}\r\n      {editingId === node._id ? (\r\n        <div className=\"comment-body\">\r\n          <textarea\r\n            className=\"comment-input\"\r\n            rows=\"2\"\r\n            value={editText}\r\n            onChange={e => setEditText(e.target.value)}\r\n          />\r\n          <div className=\"comment-actions\">\r\n            <button onClick={updateComment} className=\"comment-save-btn\">\r\n              Save\r\n            </button>\r\n            <button\r\n              onClick={() => setEditingId(null)}\r\n              className=\"comment-cancel-btn\"\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"comment-body\">\r\n            <span className=\"comment-author\">\r\n              {currentUser.email.split('@')[0]}\r\n            </span>\r\n          <p className=\"comment-text\">{node.text}</p>\r\n          <div className=\"comment-meta\">\r\n            \r\n            <span className=\"comment-time\">\r\n              {new Date(node.createdAt).toLocaleString()}\r\n            </span>\r\n          </div>\r\n          <div className=\"comment-actions\">\r\n            <button\r\n              onClick={() => {\r\n                setReplyTo(node._id);\r\n                setReplyTexts(prev => ({ ...prev, [node._id]: '' }));\r\n              }}\r\n              className=\"comment-reply-btn\"\r\n            >\r\n              Reply\r\n            </button>\r\n            {node.userId === currentUser.uid && (\r\n              <>\r\n                <button\r\n                  onClick={() => {\r\n                    setEditingId(node._id);\r\n                    setEditText(node.text);\r\n                  }}\r\n                  className=\"comment-edit-btn\"\r\n                >\r\n                  Edit\r\n                </button>\r\n                <button\r\n                  onClick={() => deleteComment(node._id)}\r\n                  className=\"comment-delete-btn\"\r\n                >\r\n                  Delete\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Reply form */}\r\n      {replyTo === node._id && (\r\n        <form\r\n          className=\"reply-form\"\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            // Only post if not empty\r\n            if ((replyTexts[node._id] || '').trim()) {\r\n              postComment(replyTexts[node._id], node._id);\r\n            }\r\n          }}\r\n        >\r\n          <textarea\r\n            className=\"comment-input\"\r\n            rows=\"2\"\r\n            placeholder=\"Write a replyâ€¦\"\r\n            value={replyTexts[node._id] || ''}\r\n            onChange={e =>\r\n              setReplyTexts(prev => ({ ...prev, [node._id]: e.target.value }))\r\n            }\r\n          />\r\n          <div className=\"comment-actions\">\r\n            <button type=\"submit\" className=\"comment-save-btn\" disabled={!(replyTexts[node._id] || '').trim()}>\r\n              Post Reply\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => setReplyTo(null)}\r\n              className=\"comment-cancel-btn\"\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n\r\n      {/* Children */}\r\n      {node.replies.length > 0 && (\r\n        <ul>\r\n          {node.replies.map(child => (\r\n            <CommentNode key={child._id} node={child} depth={depth + 1} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </li>\r\n  );\r\n\r\n  // 7. Render\r\n  if (loading) return <p className=\"comments-loading\">Loading commentsâ€¦</p>;\r\n  if (error)   return <p className=\"comments-error\">{error}</p>;\r\n\r\n  return (\r\n    <div className=\"comments-section\">\r\n      <h4 className=\"comments-title\">Comments</h4>\r\n\r\n      {/* New comment */}\r\n      <form\r\n        className=\"comment-form\"\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          postComment(newText, null);\r\n        }}\r\n      >\r\n        <textarea\r\n          className=\"comment-input\"\r\n          rows=\"3\"\r\n          placeholder=\"Add a commentâ€¦\"\r\n          value={newText}\r\n          onChange={e => setNewText(e.target.value)}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          disabled={!newText.trim()}\r\n          className=\"comment-submit-btn\"\r\n        >\r\n          Post\r\n        </button>\r\n      </form>\r\n\r\n      {/* Threaded list */}\r\n      <ul className=\"comment-list\">\r\n        {commentsTree.map(node => (\r\n          <CommentNode key={node._id} node={node} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}